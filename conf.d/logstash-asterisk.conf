input {
	file {
		start_position => "beginning"
		path => "/var/log/asterisk/cdr-custom/Master.csv"
		sincedb_path => "/var/db/logstash/sincedb"
		type => "cdr"
        }
}

filter {
	csv {
		skip_empty_columns => true
		columns => [
			"clid","src","dst","dcontext","channel",
			"dstchannel","lastapp","lastdata","start",
			"answer","end","duration","billsec",
			"disposition","amaflags","accountcode",
			"uniqueid","userfield","sequence",
			"direction","wait4answer","operator","region"
		]
	}

	if [wait4answer] {
		mutate {
			add_field => { "waiting" => "%{wait4answer}" }
			remove_field => [ "wait4answer" ]
		}
	} else {
		if ![answer] {
			mutate {
				add_field => { "waiting" => "%{duration}" }
			}
		} else {
			ruby {
				code => "
					duration = Float(event['duration'])
					billsec = Float(event['billsec'])
					event['waiting'] = (duration-billsec).round(3)
				"
			}
		}
	}

	ruby {
		code => "
			case event['direction']
			when '0'
				event['direction_msg'] = 'внутренний вызов'
			when '1'
				event['direction_msg'] = 'исходящий вызов'
			when '2'
				event['direction_msg'] = 'входящий вызов'
			end
		"
	}

	if [dstchannel] != "" {
		grok {
			match => ["dstchannel", "%{DATA:dst_channel_type}/%{DATA:dst_channel_identifier}-%{BASE16NUM:dst_channel_id}"]
		}
	}

	grok {
		match => ["channel", "%{DATA:src_channel_type}/%{DATA:src_channel_identifier}-%{BASE16NUM:src_channel_id}"]
	}

	grok {
		match => ["lastdata", "(?:%{DATA:queue_name}_%{NUMBER:queue_ext},%{GREEDYDATA:queue_options})"]
		add_field => { "queue" => "%{queue_name}_%{queue_ext}" }
		remove_field => [ "queue_name","queue_ext","queue_options" ]
		tag_on_failure => []
	}

	mutate {
		convert => [
			"duration", "float",
			"billsec", "float",
			"waiting", "float"
		]
		remove_field => [ "@timestamp","message","channel","dstchannel" ]
	}

	date {
		match => ["start", "yyyy-MM-dd HH:mm:ss"]
		target => "@timestamp"
	}

	mutate {
		replace => { "start" => "%{@timestamp}" }
	}
		

	date {
		match => ["answer", "yyyy-MM-dd HH:mm:ss"]
		target => "answer"
	}
		
	date {
		match => ["end", "yyyy-MM-dd HH:mm:ss"]
		target => "end"
	}
}

output {
        elasticsearch {
                hosts => [ "es.local:9200" ]
                index => "asterisk-%{+YYYY.MM.dd}"
                template => "/etc/logstash/asterisk.json"
                template_name => "asterisk"
                template_overwrite => true
        }
}
